<?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springsource.org/dtd/spring-beans.dtd">

 <!--+
 | Application context containing FilterChainProxy.
 +-->

 <beans>

 <!-- ======================== FILTER CHAIN ======================= -->
 <!--
 if you wish to use channel security, add "channelProcessingFilter," in
 front of "httpSessionContextIntegrationFilter" in the list below
 -->
 <bean id="filterChainProxy" class="org.springframework.security.util.FilterChainProxy">
 <property name="filterInvocationDefinitionSource">
 <value>
 <![CDATA[CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
 PATTERN_TYPE_APACHE_ANT
 /**=httpSessionContextIntegrationFilter,httpSessionReuseDetectionFilter,logoutFilter,basicProcessingFilter,requestParameterProcessingFilter,anonymousProcessingFilter,pentahoSecurityStartupFilter,exceptionTranslationFilter,filterInvocationInterceptor]]>
 </value>
 </property>
 </bean>

 <!-- ======================== AUTHENTICATION ======================= -->
 <bean id="authenticationManager" class="org.springframework.security.providers.ProviderManager">
 <property name="providers">
 <list>
 <ref bean="crowdAuthenticationProvider" />
 <!-- <ref bean="daoAuthenticationProvider" /> -->
 <!-- <ref local="anonymousAuthenticationProvider" /> -->
 </list>
 </property>
 </bean>




 <!-- Automatically receives AuthenticationEvent messages -->
 <bean id="loggerListener"
 class="org.springframework.security.event.authentication.LoggerListener" />
 <bean id="basicProcessingFilter"
 class="org.springframework.security.ui.basicauth.BasicProcessingFilter">
 <property name="authenticationManager">
 <ref bean="authenticationManager" />
 </property>
 <property name="authenticationEntryPoint">
 <ref local="crowdAuthenticationProcessingFilterEntryPoint" />
 </property>
 </bean>

 <!-- Using crowd entry point
 <bean id="basicProcessingFilterEntryPoint"
 class="org.springframework.security.ui.basicauth.BasicProcessingFilterEntryPoint">
 <property name="realmName" value="Pentaho Realm" />
 </bean>
 -->

 <!-- custom Pentaho begin -->
 <bean id="requestParameterProcessingFilter"
 class="org.pentaho.platform.web.http.security.RequestParameterAuthenticationFilter">
 <property name="authenticationManager">
 <ref bean="authenticationManager" />
 </property>
 <property name="authenticationEntryPoint">
 <ref local="requestParameterProcessingFilterEntryPoint" />
 </property>
 </bean>

 <bean id="requestParameterProcessingFilterEntryPoint"
 class="org.pentaho.platform.web.http.security.RequestParameterFilterEntryPoint" />

 <bean id="pentahoSecurityStartupFilter"
 class="org.pentaho.platform.web.http.security.SecurityStartupFilter">
 <property name="injectAnonymous" value="true" />
 </bean>

 <!-- custom Pentaho end -->
 <bean id="anonymousProcessingFilter"
 class="org.springframework.security.providers.anonymous.AnonymousProcessingFilter">
 <property name="key" value="foobar" />
 <property name="userAttribute" value="anonymousUser,Anonymous" />
 </bean>
 <bean id="anonymousAuthenticationProvider"
 class="org.springframework.security.providers.anonymous.AnonymousAuthenticationProvider">
 <property name="key" value="foobar" />
 </bean>
 <bean id="httpSessionContextIntegrationFilter"
 class="org.springframework.security.context.HttpSessionContextIntegrationFilter" />

 <bean id="crowdLogoutHandler" class="com.atlassian.crowd.integration.springsecurity.CrowdLogoutHandler">
 <property name="httpAuthenticator" ref="httpAuthenticator"/>
 </bean>

 <bean id="logoutFilter" class="org.springframework.security.ui.logout.LogoutFilter">
 <constructor-arg value="/index.jsp" />
 <!-- URL redirected to after logout -->
 <constructor-arg>
 <list>
 <ref bean="crowdLogoutHandler"/>
 <!-- <bean class="org.pentaho.platform.web.http.security.PentahoLogoutHandler" /> -->
 <bean class="org.springframework.security.ui.logout.SecurityContextLogoutHandler" />
 </list>
 </constructor-arg>
 <property name="filterProcessesUrl" value="/Logout" />
 </bean>
 <!-- puneet's changes
 <bean id="securityContextHolderAwareRequestFilter"
 class="org.springframework.security.wrapper. " />
 puneet's end -->
 <bean id="httpSessionReuseDetectionFilter"

 class="org.pentaho.platform.web.http.security.HttpSessionReuseDetectionFilter">
 <property name="filterProcessesUrl" value="/j_spring_security_check" />
 <property name="sessionReuseDetectedUrl" value="/Login?login_error=2" />
 </bean>

 <!--
 ===================== HTTP REQUEST SECURITY ====================
 -->
 <bean id="exceptionTranslationFilter"
 class="org.springframework.security.ui.ExceptionTranslationFilter">
 <property name="authenticationEntryPoint">
 <ref local="crowdAuthenticationProcessingFilterEntryPoint" />
 </property>
 <property name="accessDeniedHandler">
 <bean class="org.springframework.security.ui.AccessDeniedHandlerImpl" />
 </property>
 </bean>

 <!-- <authentication-manager alias="authenticationManager"/> -->

 <bean id="crowdAuthenticationProcessingFilterEntryPoint" class="org.springframework.security.ui.webapp.AuthenticationProcessingFilterEntryPoint">
 <property name="loginFormUrl" value="/login.jsp"/>
 </bean>

 <bean id="crowdAuthenticationProcessingFilter" class="com.atlassian.crowd.integration.springsecurity.CrowdSSOAuthenticationProcessingFilter">
 <!-- <custom-filter position="AUTHENTICATION_PROCESSING_FILTER"/> -->
 <property name="httpAuthenticator" ref="httpAuthenticator"/>
 <property name="authenticationManager" ref="authenticationManager"/>
 <property name="authenticationFailureUrl" value="/login.jsp?error=true"/>
 <property name="defaultTargetUrl" value="/"/>
 <property name="filterProcessesUrl" value="/j_security_check"/>
 </bean>



 <!-- uncomment for now -puneet
 <bean id="authenticationProcessingFilter"
 class="org.springframework.security.ui.webapp.AuthenticationProcessingFilter">
 <property name="authenticationManager">
 <ref bean="crowdAuthenticationManager" />
 </property>
 <property name="authenticationFailureUrl" value="/Login?login_error=1" />
 <property name="defaultTargetUrl" value="/Home" />
 <property name="filterProcessesUrl" value="/j_spring_security_check" />
 <property name="targetUrlResolver">
 <bean id="targetUrlResolver" class="org.springframework.security.ui.TargetUrlResolverImpl">
 <property name="justUseSavedRequestOnGet" value="true" />
 </bean>
 </property>
 </bean>
 <bean id="authenticationProcessingFilterEntryPoint"
 class="org.springframework.security.ui.webapp.AuthenticationProcessingFilterEntryPoint">
 <property name="loginFormUrl" value="/Login" />
 <property name="forceHttps" value="false" />
 </bean>-->
 <!-- puneets end -->

 <bean id="httpRequestAccessDecisionManager" class="org.springframework.security.vote.AffirmativeBased">
 <property name="allowIfAllAbstainDecisions" value="false" />
 <property name="decisionVoters">
 <list>
 <ref bean="roleVoter" />
 <!-- puneet's addition -->
 <bean class="org.springframework.security.vote.RoleVoter"/>
 <bean class="org.springframework.security.vote.AuthenticatedVoter"/>
 <!-- puneets end-->
 </list>
 </property>
 </bean>
 <!--
 Note the order that entries are placed against the
 objectDefinitionSource is critical. The FilterSecurityInterceptor will
 work from the top of the list down to the FIRST pattern that matches
 the request URL. Accordingly, you should place MOST SPECIFIC (ie
 a/b/c/d.*) expressions first, with LEAST SPECIFIC (ie a/.*)
 expressions last
 -->

 <!-- Puneet's addition -->

 <bean id="crowdUserDetailsService" class="com.atlassian.crowd.integration.springsecurity.user.CrowdUserDetailsServiceImpl">
 <property name="authenticationManager" ref="crowdAuthenticationManager"/>
 <property name="groupMembershipManager" ref="crowdGroupMembershipManager"/>
 <property name="userManager" ref="crowdUserManager"/>
 <property name="authorityPrefix" value="ROLE_"/>
 </bean>


 <bean id="crowdAuthenticationProvider" class="com.atlassian.crowd.integration.springsecurity.RemoteCrowdAuthenticationProvider">
 <!-- <custom-authentication-provider /> -->
 <constructor-arg ref="crowdAuthenticationManager"/>
 <constructor-arg ref="httpAuthenticator"/>
 <constructor-arg ref="crowdUserDetailsService"/>
 </bean>

 <!-- Puneet ends here -->

 <!-- Puneet's code for authorization with crowd users and roles -->
 <!-- authorisation

 <bean id="filterInvocationInterceptor" class="org.springframework.security.intercept.web.FilterSecurityInterceptor">
 <property name="authenticationManager" ref="authenticationManager"/>
 <property name="accessDecisionManager" ref="accessDecisionManager"/>
 <property name="objectDefinitionSource">
 <value>
 CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
 PATTERN_TYPE_APACHE_ANT
 /console/secure/**=ROLE_crowd-admin
 /console/user/**=IS_AUTHENTICATED_FULLY
 </value>
 </property>
 </bean>
 -->

 <!-- puneet's start on modifying the authorization
 <bean id="
 " class="org.springframework.security.vote.AffirmativeBased">
 <property name="allowIfAllAbstainDecisions" value="false"/>
 <property name="decisionVoters">

 <list>
 <bean class="org.springframework.security.vote.RoleVoter"/>
 <bean class="org.springframework.security.vote.AuthenticatedVoter"/>
 </list>
 </property>
 </bean>
 -->

 <bean id="filterInvocationInterceptor"
 class="org.springframework.security.intercept.web.FilterSecurityInterceptor">
 <property name="authenticationManager">
 <ref bean="authenticationManager" />
 </property>
 <property name="accessDecisionManager">
 <ref local="httpRequestAccessDecisionManager" />
 </property>
 <property name="objectDefinitionSource">
 <value>
 <!--
 Note - the "=Nobody" below is saying that resource URLs with those
 patterns not be available through a web call.
 -->


 <![CDATA[
 CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
 \A/docs/.*\Z=Anonymous,Authenticated
 \A/mantlelogin/.*\Z=Anonymous,Authenticated
 \A/mantle/mantleloginservice/*\Z=Anonymous,Authenticated
 \A/mantle/.*\Z=Authenticated
 \A/welcome/.*\Z=Anonymous,Authenticated
 \A/public/.*\Z=Anonymous,Authenticated
 \A/login.*\Z=Anonymous,Authenticated
 \A/ping/alive.gif.*\Z=Anonymous,Authenticated
 \A/j_spring_security_check.*\Z=Anonymous,Authenticated
 \A/getimage.*\Z=Anonymous,Authenticated
 \A/getresource.*\Z=Anonymous,Authenticated
 \A/admin.*\Z=Admin
 \A/auditreport.*\Z=Admin
 \A/auditreportlist.*\Z=Admin
 \A/versioncontrol.*\Z=Admin
 \A/propertieseditor.*\Z=Admin
 \A/propertiespanel.*\Z=Admin
 \A/subscriptionadmin.*\Z=Admin
 \A/resetrepository.*\Z=Admin
 \A/viewaction.*solution.admin.*\Z=Admin
 \A/scheduleradmin.*\Z=Admin
 \A/publish.*\Z=Admin
 \A/logout.*\Z=Anonymous
 \A/solutionrepositoryservice.*component=delete.*solution=system.*\Z=Nobody
 \A/solutionrepositoryservice.*solution=system.*component=delete.*\Z=Nobody
 .*system.*pentaho.xml.*=Nobody
 .*system.*applicationcontext.*.xml.*=Nobody
 .*system.*pentahoobjects.spring.xml.*=Nobody
 .*system.*pentahosystemconfig.xml.*=Nobody
 .*system.*adminplugins.xml.*=Nobody
 .*system.*plugin.properties.*=Nobody
 .*system.*publisher_config.xml.*=Nobody
 .*system.*sessionstartupactions.xml.*=Nobody
 .*system.*systemlisteners.xml.*=Nobody
 .*system.*hibernate.*=Nobody
 .*system.*birt/.*=Nobody
 .*system.*dialects/.*=Nobody
 .*system.*google/.*=Nobody
 .*system.*jasperreports/.*=Nobody
 .*system.*jfree/.*=Nobody
 .*system.*kettle/.*=Nobody
 .*system.*logs/.*=Nobody
 .*system.*metadata/.*=Nobody
 .*system.*mondrian/.*=Nobody
 .*system.*olap/.*=Nobody
 .*system.*quartz/.*=Nobody
 .*system.*simple-jndi/.*=Nobody
 .*system.*smtp-email/.*=Nobody
 .*system.*ui/.*=Nobody
 .*system.*analysistemplate.tpl.*=Nobody
 .*system.*\.\./.*=Nobody
 \A/.*\Z=Authenticated
 ]]>
 <!-- puneets addition /console/secure/**=ROLE_crowd-admin /console/user/**=IS_AUTHENTICATED_FULLY -->
 </value>
 </property>
 </bean>
 </beans>